require "rubygems"
require "rubygems/package_task"
require "rake/extensiontask" unless RUBY_PLATFORM == "java"
require "rake/testtask"

import 'lib/google/tasks/ffi.rake'

spec = Gem::Specification.load("google-protobuf.gemspec")

if !ENV['PROTOC'].nil?
  protoc_command = ENV['PROTOC']
elsif system('../bazel-bin/protoc --version')
  protoc_command = '../bazel-bin/protoc'
else
  protoc_command = 'protoc'
end

if !ENV['BAZEL'].nil?
  bazel_command = ENV['BAZEL']
elsif system('which bazelisk')
  bazel_command = 'bazelisk'
else
  bazel_command = 'bazel'
end

# The broader bazel build will have already generated the protos.
in_bazel_build = ENV['IN_DOCKER'] == 'true' || ENV['BAZEL'] == 'true'

unless in_bazel_build
  well_known_protos_sentinel = "tmp/.well_known_protos_built"

  directory "tmp"

  task :compile_well_known_protos => Rake::FileList["../src/google/**/*.proto"] + ["tmp"] do
    Dir.chdir('..') do
      sh "#{bazel_command} build //ruby:well_known_ruby_protos"
    end

    # Create a timestamp file to track when we last ran this task
    touch well_known_protos_sentinel
  end

  # Create a sentinel file to track the build
  file well_known_protos_sentinel => :build_well_known_protos

  task :copy_compiled_well_known_protos => [:compile_well_known_protos] do
    Rake::FileList["../bazel-bin/ruby/google/protobuf/**/*_pb.rb"].each do |f|
      FileUtils.cp(f, "lib/google/protobuf")
      # The output from the bazel build lacks write permissions.  The published
      # gem should have write permissions on these files.
      FileUtils.chmod("u+w", "lib/google/protobuf/#{File.basename(f)}")
    end
  end

  task :genproto => [:copy_compiled_well_known_protos, :compile_test_protos]
else
  task :genproto do
    puts "Skipping genproto task in Bazel build"
  end
end


utf8_range_dest_dir = "ext/google/protobuf_c/third_party/utf8_range"
utf8_range_src_dir = "../third_party/utf8_range"

%w[
  utf8_range.h utf8_range.c utf8_range_sse.inc utf8_range_neon.inc LICENSE
].each do |utf8_basename|
  utf8_range_dest_file = File.join(utf8_range_dest_dir, utf8_basename)
  utf8_range_src_file = File.join(utf8_range_src_dir, utf8_basename)

  file utf8_range_dest_file => utf8_range_src_file do
    FileUtils.mkdir_p utf8_range_dest_dir
    FileUtils.cp utf8_range_src_file, utf8_range_dest_dir
  end

  task :copy_third_party => utf8_range_dest_file
end

if RUBY_PLATFORM == "java"
  task :clean => :require_mvn do
    system("mvn --batch-mode clean")
  end

  task :compile => :require_mvn do
    system("mvn --batch-mode package")
  end

  task :require_mvn do
    raise ArgumentError, "maven needs to be installed" if `which mvn` == ''
  end

else
  Rake::ExtensionTask.new("protobuf_c", spec) do |ext|
    unless RUBY_PLATFORM =~ /darwin/
      # TODO: also set "no_native to true" for mac if possible. As is,
      # "no_native" can only be set if the RUBY_PLATFORM doing
      # cross-compilation is contained in the "ext.cross_platform" array.
      ext.no_native = true
    end
    ext.ext_dir = "ext/google/protobuf_c"
    ext.lib_dir = "lib/google"
    ext.cross_compile = true
    ext.cross_platform = [
      'x86-mingw32', 'x64-mingw32', 'x64-mingw-ucrt',
      'x86_64-linux', 'x86-linux',
      'x86_64-darwin', 'arm64-darwin',
    ]

    ext.cross_compiling do |gem_spec|
      # rake-compiler would call `spec.extensions.clear` which removes the `Rakefile` extension,
      # that `rake` doesn't need to be a runtime dependency for native gems.
      gem_spec.dependencies.delete_if { |dependency| dependency.name == 'rake' }
      gem_spec.add_development_dependency 'rake', '>= 13'
    end
  end

  namespace :compile do
    # The third party libraries need to be copied before we compile the C extension.
    task :protobuf_c => [:copy_third_party]
  end

  task 'gem:java' do
    sh "rm Gemfile.lock"
    require 'rake_compiler_dock'
    # Specify the repo root as the working and mount directory to provide access
    # to the java directory
    repo_root = File.realdirpath File.join(Dir.pwd, '..')
    RakeCompilerDock.sh <<-"EOT", platform: 'jruby', rubyvm: :jruby, mountdir: repo_root, workdir: repo_root
      sudo apt-get install maven -y && \
      cd java && mvn install -Dmaven.test.skip=true && cd ../ruby && \
      bundle && \
      IN_DOCKER=true rake compile gem
    EOT
  end

  task 'gem:windows' do
    sh "rm Gemfile.lock"
    require 'rake_compiler_dock'
    ['x86-mingw32', 'x64-mingw32', 'x64-mingw-ucrt', 'x86_64-linux', 'x86-linux'].each do |plat|
      RakeCompilerDock.sh <<-"EOT", platform: plat
        bundle && \
        IN_DOCKER=true rake native:#{plat} pkg/#{spec.full_name}-#{plat}.gem RUBY_CC_VERSION=3.1.0:3.0.0:2.7.0
      EOT
    end
  end

  if RUBY_PLATFORM =~ /darwin/
    task 'gem:native' do
      system "rake copy_compiled_well_known_protos"
      system "rake cross native gem RUBY_CC_VERSION=3.1.0"
    end
  else
    task 'gem:native' => [:copy_compiled_well_known_protos, 'gem:windows', 'gem:java']
  end
end

# Setup rake clean, typically used for intermediate files
CLEAN.include("pkg/", "tmp/")

# Setup rake cobber, which removes all generated products/artifacts adn also
# includes everything in CLEAN
# clobber all subdirectories (like third_party) of ext/google/protobuf_c but
# not the files in ext/google/protobuf_c.
CLOBBER.include("lib/google/protobuf/*_pb.rb", "tests/*_pb.rb", "ext/google/protobuf_c/*/")

Gem::PackageTask.new(spec) do |pkg|
  pkg.package_dir = "pkg"

  # When packaging the gem, we want to replace the "Rakefile" extension with
  # "ext/google/protobuf_c/extconf.rb".
  pkg.gem_spec.extensions.map! do |ext|
    ext == "Rakefile" ? "ext/google/protobuf_c/extconf.rb" : ext
  end
end

# The gemspec `files` array references autogenerated files.  This task simply
# refreshes this value to ensure autogenerated files are included in the gem.
task :refresh_gemspec_files do
  Gem::Specification.send(:clear_load_cache) # TODO :-(
  spec.files = Gem::Specification.load("google-protobuf.gemspec").files.reject do |f|
    f == "Rakefile"
  end
end

test_protos_src = Rake::FileList["tests/*.proto"]
test_protos_dst = test_protos_src.pathmap("%X_pb.rb")

test_protos_src.zip(test_protos_dst).each do |test_proto, test_pb_ruby|
  file test_pb_ruby  => test_proto do |t|
    sh "#{protoc_command} -I../src -I./tests --ruby_out=tests  #{t.source}"
  end
end

task :compile_test_protos => test_protos_dst

Rake::TestTask.new(:test => ENV['BAZEL'] == 'true' ? [:compile_test_protos] : [:build, :genproto]) do |t|
  t.test_files = FileList["tests/*.rb"].exclude("tests/gc_test.rb", "tests/common_tests.rb")
end

# gc_test needs to be split out to ensure the generated file hasn't been
# imported by other tests.
Rake::TestTask.new(:gc_test => ENV['BAZEL'] == 'true' ? [] : :build) do |t|
  t.test_files = FileList["tests/gc_test.rb"]
end

task :build => [:clean, :genproto, :copy_third_party, :compile, :"ffi-protobuf:default"]
Rake::Task[:gem].enhance [:copy_third_party, :genproto, :refresh_gemspec_files]
task :default => [:build]

# vim:sw=2:et
